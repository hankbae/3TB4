// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/31/2019 01:32:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          clock_divider
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module clock_divider_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Reset_n;
reg [20:0] divisor;
// wires                                               
wire clk_ms;

// assign statements (if any)                          
clock_divider i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Reset_n(Reset_n),
	.clk_ms(clk_ms),
	.divisor(divisor)
);
initial 
begin 
#1000000 $finish;
end 

// Clock
initial
begin
	Clock = 1'b1;
	# 5000;
	repeat(99)
	begin
		Clock = 1'b0;
		Clock = #5000 1'b1;
		# 5000;
	end
	Clock = 1'b0;
end 

// Reset_n
initial
begin
	Reset_n = 1'b1;
	Reset_n = #70000 1'b0;
	Reset_n = #270000 1'b1;
end 
// divisor[ 20 ]
initial
begin
	divisor[20] = 1'b0;
end 
// divisor[ 19 ]
initial
begin
	divisor[19] = 1'b0;
end 
// divisor[ 18 ]
initial
begin
	divisor[18] = 1'b0;
end 
// divisor[ 17 ]
initial
begin
	divisor[17] = 1'b0;
end 
// divisor[ 16 ]
initial
begin
	divisor[16] = 1'b0;
end 
// divisor[ 15 ]
initial
begin
	divisor[15] = 1'b0;
end 
// divisor[ 14 ]
initial
begin
	divisor[14] = 1'b0;
end 
// divisor[ 13 ]
initial
begin
	divisor[13] = 1'b0;
end 
// divisor[ 12 ]
initial
begin
	divisor[12] = 1'b0;
end 
// divisor[ 11 ]
initial
begin
	divisor[11] = 1'b0;
end 
// divisor[ 10 ]
initial
begin
	divisor[10] = 1'b0;
end 
// divisor[ 9 ]
initial
begin
	divisor[9] = 1'b0;
end 
// divisor[ 8 ]
initial
begin
	divisor[8] = 1'b0;
end 
// divisor[ 7 ]
initial
begin
	divisor[7] = 1'b0;
end 
// divisor[ 6 ]
initial
begin
	divisor[6] = 1'b0;
end 
// divisor[ 5 ]
initial
begin
	divisor[5] = 1'b0;
end 
// divisor[ 4 ]
initial
begin
	divisor[4] = 1'b0;
end 
// divisor[ 3 ]
initial
begin
	divisor[3] = 1'b1;
end 
// divisor[ 2 ]
initial
begin
	divisor[2] = 1'b0;
end 
// divisor[ 1 ]
initial
begin
	divisor[1] = 1'b1;
end 
// divisor[ 0 ]
initial
begin
	divisor[0] = 1'b0;
end 
endmodule

