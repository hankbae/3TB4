// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2019 17:33:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          num_decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module num_decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg flashing;
reg [3:0] number;
reg off;
// wires                                               
wire [6:0] disp;

// assign statements (if any)                          
num_decoder i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.disp(disp),
	.flashing(flashing),
	.number(number),
	.off(off)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// number[ 3 ]
initial
begin
	repeat(3)
	begin
		number[3] = 1'b0;
		number[3] = #160000 1'b1;
		# 160000;
	end
	number[3] = 1'b0;
end 
// number[ 2 ]
initial
begin
	repeat(6)
	begin
		number[2] = 1'b0;
		number[2] = #80000 1'b1;
		# 80000;
	end
	number[2] = 1'b0;
end 
// number[ 1 ]
initial
begin
	repeat(12)
	begin
		number[1] = 1'b0;
		number[1] = #40000 1'b1;
		# 40000;
	end
	number[1] = 1'b0;
end 
// number[ 0 ]
always
begin
	number[0] = 1'b0;
	number[0] = #20000 1'b1;
	#20000;
end 

// flashing
initial
begin
	flashing = 1'b0;
	flashing = #50000 1'b1;
	flashing = #320000 1'b0;
end 

// off
initial
begin
	off = 1'b0;
	off = #460000 1'b1;
	off = #260000 1'b0;
end 
endmodule

