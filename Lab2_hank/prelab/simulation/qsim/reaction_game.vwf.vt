// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2019 23:46:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          reaction_game
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module reaction_game_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [3:0] KEY;
// wires                                               
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [23:0] HEX_buff;
wire HEX_flashing;
wire HEX_off;
wire [23:0] HEX_val;
wire [9:0] LEDR;
wire P1_addPoint;
wire P1_ledEnable;
wire [2:0] P1_points;
wire P1_press;
wire P2_addPoint;
wire P2_ledEnable;
wire [2:0] P2_points;
wire P2_press;
wire clk;
wire [19:0] divisor;
wire init_start;
wire init_stop;
wire [19:0] init_timer;
wire main_reset;
wire [14:0] rng_delay;
wire [14:0] rng_delayBuff;
wire rng_ready;
wire rng_start;
wire [19:0] rng_timer;
wire stopwatch_start;
wire stopwatch_stop;
wire [19:0] stopwatch_timer;

// assign statements (if any)                          
reaction_game i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX_buff(HEX_buff),
	.HEX_flashing(HEX_flashing),
	.HEX_off(HEX_off),
	.HEX_val(HEX_val),
	.KEY(KEY),
	.LEDR(LEDR),
	.P1_addPoint(P1_addPoint),
	.P1_ledEnable(P1_ledEnable),
	.P1_points(P1_points),
	.P1_press(P1_press),
	.P2_addPoint(P2_addPoint),
	.P2_ledEnable(P2_ledEnable),
	.P2_points(P2_points),
	.P2_press(P2_press),
	.clk(clk),
	.divisor(divisor),
	.init_start(init_start),
	.init_stop(init_stop),
	.init_timer(init_timer),
	.main_reset(main_reset),
	.rng_delay(rng_delay),
	.rng_delayBuff(rng_delayBuff),
	.rng_ready(rng_ready),
	.rng_start(rng_start),
	.rng_timer(rng_timer),
	.stopwatch_start(stopwatch_start),
	.stopwatch_stop(stopwatch_stop),
	.stopwatch_timer(stopwatch_timer)
);
initial 
begin 
#4000000 $finish;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #5000 1'b1;
	#5000;
end 
// KEY[ 3 ]
initial
begin
	KEY[3] = 1'b1;
end 
// KEY[ 2 ]
initial
begin
	KEY[2] = 1'b1;
end 
// KEY[ 1 ]
initial
begin
	KEY[1] = 1'b1;
end 
// KEY[ 0 ]
initial
begin
	KEY[0] = 1'b1;
end 
endmodule

