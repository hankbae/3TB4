// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2019 16:23:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          alu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg add_sub;
reg [7:0] operanda;
reg [7:0] operandb;
reg set_high;
reg set_low;
// wires                                               
wire [7:0] result;

// assign statements (if any)                          
alu i1 (
// port map - connection between master ports and signals/registers   
	.add_sub(add_sub),
	.operanda(operanda),
	.operandb(operandb),
	.result(result),
	.set_high(set_high),
	.set_low(set_low)
);
initial 
begin 
#1000000 $finish;
end 
// operanda[ 7 ]
initial
begin
	operanda[7] = 1'b1;
	operanda[7] = #150000 1'b0;
	operanda[7] = #600000 1'b1;
	operanda[7] = #150000 1'b0;
end 
// operanda[ 6 ]
initial
begin
	operanda[6] = 1'b1;
	operanda[6] = #300000 1'b0;
	operanda[6] = #150000 1'b1;
	operanda[6] = #150000 1'b0;
end 
// operanda[ 5 ]
initial
begin
	operanda[5] = 1'b1;
	operanda[5] = #300000 1'b0;
	operanda[5] = #150000 1'b1;
	operanda[5] = #150000 1'b0;
	operanda[5] = #150000 1'b1;
	operanda[5] = #150000 1'b0;
end 
// operanda[ 4 ]
initial
begin
	operanda[4] = 1'b0;
	operanda[4] = #150000 1'b1;
	operanda[4] = #150000 1'b0;
	operanda[4] = #150000 1'b1;
	operanda[4] = #150000 1'b0;
end 
// operanda[ 3 ]
initial
begin
	operanda[3] = 1'b1;
	operanda[3] = #150000 1'b0;
	operanda[3] = #150000 1'b1;
	operanda[3] = #450000 1'b0;
end 
// operanda[ 2 ]
initial
begin
	operanda[2] = 1'b0;
	operanda[2] = #600000 1'b1;
	operanda[2] = #150000 1'b0;
end 
// operanda[ 1 ]
initial
begin
	operanda[1] = 1'b0;
	operanda[1] = #150000 1'b1;
end 
// operanda[ 0 ]
initial
begin
	operanda[0] = 1'b1;
	operanda[0] = #150000 1'b0;
	operanda[0] = #300000 1'b1;
	operanda[0] = #150000 1'b0;
end 
// operandb[ 7 ]
initial
begin
	operandb[7] = 1'b0;
	operandb[7] = #300000 1'b1;
	operandb[7] = #300000 1'b0;
	operandb[7] = #150000 1'b1;
end 
// operandb[ 6 ]
initial
begin
	operandb[6] = 1'b0;
	operandb[6] = #450000 1'b1;
	operandb[6] = #300000 1'b0;
end 
// operandb[ 5 ]
initial
begin
	operandb[5] = 1'b1;
	operandb[5] = #150000 1'b0;
end 
// operandb[ 4 ]
initial
begin
	operandb[4] = 1'b0;
	operandb[4] = #150000 1'b1;
	operandb[4] = #300000 1'b0;
	operandb[4] = #300000 1'b1;
end 
// operandb[ 3 ]
initial
begin
	operandb[3] = 1'b1;
	operandb[3] = #600000 1'b0;
end 
// operandb[ 2 ]
initial
begin
	operandb[2] = 1'b0;
	operandb[2] = #750000 1'b1;
	operandb[2] = #150000 1'b0;
end 
// operandb[ 1 ]
initial
begin
	operandb[1] = 1'b1;
	operandb[1] = #150000 1'b0;
	operandb[1] = #450000 1'b1;
	operandb[1] = #150000 1'b0;
end 
// operandb[ 0 ]
initial
begin
	operandb[0] = 1'b1;
	operandb[0] = #150000 1'b0;
	operandb[0] = #150000 1'b1;
	operandb[0] = #450000 1'b0;
	operandb[0] = #150000 1'b1;
end 

// add_sub
initial
begin
	add_sub = 1'b1;
	add_sub = #150000 1'b0;
end 

// set_high
initial
begin
	set_high = 1'b0;
	set_high = #150000 1'b1;
	set_high = #150000 1'b0;
end 

// set_low
initial
begin
	set_low = 1'b0;
	set_low = #300000 1'b1;
	set_low = #150000 1'b0;
end 
endmodule

