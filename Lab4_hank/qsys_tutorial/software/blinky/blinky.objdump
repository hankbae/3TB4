
blinky.elf:     file format elf32-littlenios2
blinky.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000ee8 memsz 0x00000ee8 flags r-x
    LOAD off    0x00001f08 vaddr 0x00000f08 paddr 0x00000ff8 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x000020e8 vaddr 0x000010e8 paddr 0x000010e8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001ff8  2**0
                  CONTENTS
  2 .text         00000ec4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  00000ee4  00000ee4  00001ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00000f08  00000ff8  00001f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000010e8  000010e8  000020e8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000010f8  000010f8  00001ff8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002c8  00000000  00000000  00002020  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000034b4  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001201  00000000  00000000  0000579c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001599  00000000  00000000  0000699d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000004b0  00000000  00000000  00007f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f8d  00000000  00000000  000083e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000114e  00000000  00000000  00009375  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000a4c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001a8  00000000  00000000  0000a508  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b77e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  0000b781  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b790  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b791  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000b792  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000b79b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000b7a4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0000b7ad  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001f  00000000  00000000  0000b7b8  2**0
                  CONTENTS, READONLY
 26 .jdi          000044ec  00000000  00000000  0000b7d7  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00035352  00000000  00000000  0000fcc3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000ee4 l    d  .rodata	00000000 .rodata
00000f08 l    d  .rwdata	00000000 .rwdata
000010e8 l    d  .bss	00000000 .bss
000010f8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../blinky_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000138 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00000f08 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000009f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000b64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000ae0 g     F .text	00000054 alt_main
00000ff8 g       *ABS*	00000000 __flash_rwdata_start
000000ec g     F .text	0000004c printf
00000ff0 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000010e8 g     O .bss	00000004 errno
000010f0 g     O .bss	00000004 alt_argv
00008fe8 g       *ABS*	00000000 _gp
00000b34 g     F .text	00000030 usleep
000000b0 g     F .text	0000003c _printf_r
00000910 g     F .text	00000064 .hidden __udivsi3
00000fe8 g     O .rwdata	00000004 _global_impure_ptr
000010f8 g       *ABS*	00000000 __bss_end
00000e80 g     F .text	00000020 alt_dcache_flush_all
00000ff8 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
00000ba0 g     F .text	0000009c write
00000f08 g       *ABS*	00000000 __ram_rodata_end
00000974 g     F .text	00000058 .hidden __umodsi3
000010f8 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00000c94 g     F .text	00000094 altera_avalon_jtag_uart_write
000001a4 g     F .text	0000052c ___vfprintf_internal_r
00000020 g     F .text	0000003c _start
00000c74 g     F .text	00000020 alt_sys_init
000009cc g     F .text	00000028 .hidden __mulsi3
00000f08 g       *ABS*	00000000 __ram_rwdata_start
00000ee4 g       *ABS*	00000000 __ram_rodata_start
00000d28 g     F .text	00000158 alt_busy_sleep
000010f8 g       *ABS*	00000000 __alt_stack_base
000006ec g     F .text	000000b8 __sfvwrite_small_dev
000010e8 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000054 main
000010f4 g     O .bss	00000004 alt_envp
00000ff4 g     O .rwdata	00000004 alt_errno
00000818 g     F .text	00000084 .hidden __divsi3
00000ee4 g       *ABS*	00000000 __flash_rodata_start
00000c3c g     F .text	00000038 alt_irq_init
000007c0 g     F .text	00000058 _write_r
00000fec g     O .rwdata	00000004 _impure_ptr
000010ec g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000ff8 g       *ABS*	00000000 _edata
000010f8 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000ec0 g     F .text	00000024 altera_nios2_qsys_irq_init
0000089c g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000007a4 g     F .text	0000001c strlen
00000ea0 g     F .text	00000020 alt_icache_flush_all
000006d0 g     F .text	0000001c __vfprintf_internal
00000a5c g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a3fa14 	ori	gp,gp,36840
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10843a14 	ori	r2,r2,4328

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c43e14 	ori	r3,r3,4344

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff705c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	0000a5c0 	call	a5c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	0000ae00 	call	ae0 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7070>

0000005c <main>:

#include "system.h"
#include <unistd.h>

int main()
{
  5c:	defffd04 	addi	sp,sp,-12
  60:	dfc00215 	stw	ra,8(sp)
  64:	df000115 	stw	fp,4(sp)
  68:	df000104 	addi	fp,sp,4
	char * LEDs = (char*) LEDS_BASE;
  6c:	00a40414 	movui	r2,36880
  70:	e0bfff15 	stw	r2,-4(fp)

	printf("Hello from Group 3 MT3TB4 - 2019!");
  74:	01000034 	movhi	r4,0
  78:	2103b904 	addi	r4,r4,3812
  7c:	00000ec0 	call	ec <printf>
	while(1){
		*LEDs=0xFF;
  80:	e0bfff17 	ldw	r2,-4(fp)
  84:	00ffffc4 	movi	r3,-1
  88:	10c00005 	stb	r3,0(r2)
		usleep(1000*1000);
  8c:	010003f4 	movhi	r4,15
  90:	21109004 	addi	r4,r4,16960
  94:	0000b340 	call	b34 <usleep>
		*LEDs=0x00;
  98:	e0bfff17 	ldw	r2,-4(fp)
  9c:	10000005 	stb	zero,0(r2)
		usleep(1000*1000);
  a0:	010003f4 	movhi	r4,15
  a4:	21109004 	addi	r4,r4,16960
  a8:	0000b340 	call	b34 <usleep>
	}
  ac:	003ff406 	br	80 <_gp+0xffff7098>

000000b0 <_printf_r>:
  b0:	defffd04 	addi	sp,sp,-12
  b4:	dfc00015 	stw	ra,0(sp)
  b8:	d9800115 	stw	r6,4(sp)
  bc:	d9c00215 	stw	r7,8(sp)
  c0:	20c00217 	ldw	r3,8(r4)
  c4:	01800034 	movhi	r6,0
  c8:	3181bb04 	addi	r6,r6,1772
  cc:	19800115 	stw	r6,4(r3)
  d0:	280d883a 	mov	r6,r5
  d4:	21400217 	ldw	r5,8(r4)
  d8:	d9c00104 	addi	r7,sp,4
  dc:	00001a40 	call	1a4 <___vfprintf_internal_r>
  e0:	dfc00017 	ldw	ra,0(sp)
  e4:	dec00304 	addi	sp,sp,12
  e8:	f800283a 	ret

000000ec <printf>:
  ec:	defffc04 	addi	sp,sp,-16
  f0:	dfc00015 	stw	ra,0(sp)
  f4:	d9400115 	stw	r5,4(sp)
  f8:	d9800215 	stw	r6,8(sp)
  fc:	d9c00315 	stw	r7,12(sp)
 100:	00800034 	movhi	r2,0
 104:	1083fb04 	addi	r2,r2,4076
 108:	10800017 	ldw	r2,0(r2)
 10c:	01400034 	movhi	r5,0
 110:	2941bb04 	addi	r5,r5,1772
 114:	10c00217 	ldw	r3,8(r2)
 118:	d9800104 	addi	r6,sp,4
 11c:	19400115 	stw	r5,4(r3)
 120:	200b883a 	mov	r5,r4
 124:	11000217 	ldw	r4,8(r2)
 128:	00006d00 	call	6d0 <__vfprintf_internal>
 12c:	dfc00017 	ldw	ra,0(sp)
 130:	dec00404 	addi	sp,sp,16
 134:	f800283a 	ret

00000138 <print_repeat>:
 138:	defffb04 	addi	sp,sp,-20
 13c:	dc800315 	stw	r18,12(sp)
 140:	dc400215 	stw	r17,8(sp)
 144:	dc000115 	stw	r16,4(sp)
 148:	dfc00415 	stw	ra,16(sp)
 14c:	2025883a 	mov	r18,r4
 150:	2823883a 	mov	r17,r5
 154:	d9800005 	stb	r6,0(sp)
 158:	3821883a 	mov	r16,r7
 15c:	04000a0e 	bge	zero,r16,188 <print_repeat+0x50>
 160:	88800117 	ldw	r2,4(r17)
 164:	01c00044 	movi	r7,1
 168:	d80d883a 	mov	r6,sp
 16c:	880b883a 	mov	r5,r17
 170:	9009883a 	mov	r4,r18
 174:	103ee83a 	callr	r2
 178:	843fffc4 	addi	r16,r16,-1
 17c:	103ff726 	beq	r2,zero,15c <_gp+0xffff7174>
 180:	00bfffc4 	movi	r2,-1
 184:	00000106 	br	18c <print_repeat+0x54>
 188:	0005883a 	mov	r2,zero
 18c:	dfc00417 	ldw	ra,16(sp)
 190:	dc800317 	ldw	r18,12(sp)
 194:	dc400217 	ldw	r17,8(sp)
 198:	dc000117 	ldw	r16,4(sp)
 19c:	dec00504 	addi	sp,sp,20
 1a0:	f800283a 	ret

000001a4 <___vfprintf_internal_r>:
 1a4:	deffe504 	addi	sp,sp,-108
 1a8:	d8c00804 	addi	r3,sp,32
 1ac:	ddc01815 	stw	r23,96(sp)
 1b0:	dd801715 	stw	r22,92(sp)
 1b4:	dd401615 	stw	r21,88(sp)
 1b8:	dd001515 	stw	r20,84(sp)
 1bc:	dcc01415 	stw	r19,80(sp)
 1c0:	dc801315 	stw	r18,76(sp)
 1c4:	dc401215 	stw	r17,72(sp)
 1c8:	dc001115 	stw	r16,68(sp)
 1cc:	dfc01a15 	stw	ra,104(sp)
 1d0:	df001915 	stw	fp,100(sp)
 1d4:	2029883a 	mov	r20,r4
 1d8:	2823883a 	mov	r17,r5
 1dc:	382d883a 	mov	r22,r7
 1e0:	d9800f15 	stw	r6,60(sp)
 1e4:	0021883a 	mov	r16,zero
 1e8:	d8000e15 	stw	zero,56(sp)
 1ec:	d8000a15 	stw	zero,40(sp)
 1f0:	002b883a 	mov	r21,zero
 1f4:	0027883a 	mov	r19,zero
 1f8:	0025883a 	mov	r18,zero
 1fc:	d8000c15 	stw	zero,48(sp)
 200:	d8000b15 	stw	zero,44(sp)
 204:	002f883a 	mov	r23,zero
 208:	d8c00915 	stw	r3,36(sp)
 20c:	d8c00f17 	ldw	r3,60(sp)
 210:	19000003 	ldbu	r4,0(r3)
 214:	20803fcc 	andi	r2,r4,255
 218:	1080201c 	xori	r2,r2,128
 21c:	10bfe004 	addi	r2,r2,-128
 220:	10011e26 	beq	r2,zero,69c <___vfprintf_internal_r+0x4f8>
 224:	00c00044 	movi	r3,1
 228:	b8c01426 	beq	r23,r3,27c <___vfprintf_internal_r+0xd8>
 22c:	1dc00216 	blt	r3,r23,238 <___vfprintf_internal_r+0x94>
 230:	b8000626 	beq	r23,zero,24c <___vfprintf_internal_r+0xa8>
 234:	00011506 	br	68c <___vfprintf_internal_r+0x4e8>
 238:	01400084 	movi	r5,2
 23c:	b9401d26 	beq	r23,r5,2b4 <___vfprintf_internal_r+0x110>
 240:	014000c4 	movi	r5,3
 244:	b9402b26 	beq	r23,r5,2f4 <___vfprintf_internal_r+0x150>
 248:	00011006 	br	68c <___vfprintf_internal_r+0x4e8>
 24c:	01400944 	movi	r5,37
 250:	1140fc26 	beq	r2,r5,644 <___vfprintf_internal_r+0x4a0>
 254:	88800117 	ldw	r2,4(r17)
 258:	d9000005 	stb	r4,0(sp)
 25c:	01c00044 	movi	r7,1
 260:	d80d883a 	mov	r6,sp
 264:	880b883a 	mov	r5,r17
 268:	a009883a 	mov	r4,r20
 26c:	103ee83a 	callr	r2
 270:	1000d81e 	bne	r2,zero,5d4 <___vfprintf_internal_r+0x430>
 274:	84000044 	addi	r16,r16,1
 278:	00010406 	br	68c <___vfprintf_internal_r+0x4e8>
 27c:	01400c04 	movi	r5,48
 280:	1140fa26 	beq	r2,r5,66c <___vfprintf_internal_r+0x4c8>
 284:	01400944 	movi	r5,37
 288:	11400a1e 	bne	r2,r5,2b4 <___vfprintf_internal_r+0x110>
 28c:	d8800005 	stb	r2,0(sp)
 290:	88800117 	ldw	r2,4(r17)
 294:	b80f883a 	mov	r7,r23
 298:	d80d883a 	mov	r6,sp
 29c:	880b883a 	mov	r5,r17
 2a0:	a009883a 	mov	r4,r20
 2a4:	103ee83a 	callr	r2
 2a8:	1000ca1e 	bne	r2,zero,5d4 <___vfprintf_internal_r+0x430>
 2ac:	84000044 	addi	r16,r16,1
 2b0:	0000f506 	br	688 <___vfprintf_internal_r+0x4e4>
 2b4:	25fff404 	addi	r23,r4,-48
 2b8:	bdc03fcc 	andi	r23,r23,255
 2bc:	00c00244 	movi	r3,9
 2c0:	1dc00936 	bltu	r3,r23,2e8 <___vfprintf_internal_r+0x144>
 2c4:	00bfffc4 	movi	r2,-1
 2c8:	90800426 	beq	r18,r2,2dc <___vfprintf_internal_r+0x138>
 2cc:	01400284 	movi	r5,10
 2d0:	9009883a 	mov	r4,r18
 2d4:	00009cc0 	call	9cc <__mulsi3>
 2d8:	00000106 	br	2e0 <___vfprintf_internal_r+0x13c>
 2dc:	0005883a 	mov	r2,zero
 2e0:	b8a5883a 	add	r18,r23,r2
 2e4:	0000e206 	br	670 <___vfprintf_internal_r+0x4cc>
 2e8:	01400b84 	movi	r5,46
 2ec:	1140e426 	beq	r2,r5,680 <___vfprintf_internal_r+0x4dc>
 2f0:	05c00084 	movi	r23,2
 2f4:	213ff404 	addi	r4,r4,-48
 2f8:	27003fcc 	andi	fp,r4,255
 2fc:	00c00244 	movi	r3,9
 300:	1f000936 	bltu	r3,fp,328 <___vfprintf_internal_r+0x184>
 304:	00bfffc4 	movi	r2,-1
 308:	98800426 	beq	r19,r2,31c <___vfprintf_internal_r+0x178>
 30c:	01400284 	movi	r5,10
 310:	9809883a 	mov	r4,r19
 314:	00009cc0 	call	9cc <__mulsi3>
 318:	00000106 	br	320 <___vfprintf_internal_r+0x17c>
 31c:	0005883a 	mov	r2,zero
 320:	e0a7883a 	add	r19,fp,r2
 324:	0000d906 	br	68c <___vfprintf_internal_r+0x4e8>
 328:	00c01b04 	movi	r3,108
 32c:	10c0d226 	beq	r2,r3,678 <___vfprintf_internal_r+0x4d4>
 330:	013fffc4 	movi	r4,-1
 334:	99000226 	beq	r19,r4,340 <___vfprintf_internal_r+0x19c>
 338:	d8000b15 	stw	zero,44(sp)
 33c:	00000106 	br	344 <___vfprintf_internal_r+0x1a0>
 340:	04c00044 	movi	r19,1
 344:	01001a44 	movi	r4,105
 348:	11001626 	beq	r2,r4,3a4 <___vfprintf_internal_r+0x200>
 34c:	20800916 	blt	r4,r2,374 <___vfprintf_internal_r+0x1d0>
 350:	010018c4 	movi	r4,99
 354:	11008826 	beq	r2,r4,578 <___vfprintf_internal_r+0x3d4>
 358:	01001904 	movi	r4,100
 35c:	11001126 	beq	r2,r4,3a4 <___vfprintf_internal_r+0x200>
 360:	01001604 	movi	r4,88
 364:	1100c81e 	bne	r2,r4,688 <___vfprintf_internal_r+0x4e4>
 368:	00c00044 	movi	r3,1
 36c:	d8c00e15 	stw	r3,56(sp)
 370:	00001506 	br	3c8 <___vfprintf_internal_r+0x224>
 374:	01001cc4 	movi	r4,115
 378:	11009826 	beq	r2,r4,5dc <___vfprintf_internal_r+0x438>
 37c:	20800416 	blt	r4,r2,390 <___vfprintf_internal_r+0x1ec>
 380:	01001bc4 	movi	r4,111
 384:	1100c01e 	bne	r2,r4,688 <___vfprintf_internal_r+0x4e4>
 388:	05400204 	movi	r21,8
 38c:	00000f06 	br	3cc <___vfprintf_internal_r+0x228>
 390:	01001d44 	movi	r4,117
 394:	11000d26 	beq	r2,r4,3cc <___vfprintf_internal_r+0x228>
 398:	01001e04 	movi	r4,120
 39c:	11000a26 	beq	r2,r4,3c8 <___vfprintf_internal_r+0x224>
 3a0:	0000b906 	br	688 <___vfprintf_internal_r+0x4e4>
 3a4:	d8c00a17 	ldw	r3,40(sp)
 3a8:	b7000104 	addi	fp,r22,4
 3ac:	18000726 	beq	r3,zero,3cc <___vfprintf_internal_r+0x228>
 3b0:	df000d15 	stw	fp,52(sp)
 3b4:	b5c00017 	ldw	r23,0(r22)
 3b8:	b800080e 	bge	r23,zero,3dc <___vfprintf_internal_r+0x238>
 3bc:	05efc83a 	sub	r23,zero,r23
 3c0:	02400044 	movi	r9,1
 3c4:	00000606 	br	3e0 <___vfprintf_internal_r+0x23c>
 3c8:	05400404 	movi	r21,16
 3cc:	b0c00104 	addi	r3,r22,4
 3d0:	d8c00d15 	stw	r3,52(sp)
 3d4:	b5c00017 	ldw	r23,0(r22)
 3d8:	d8000a15 	stw	zero,40(sp)
 3dc:	0013883a 	mov	r9,zero
 3e0:	d839883a 	mov	fp,sp
 3e4:	b8001726 	beq	r23,zero,444 <___vfprintf_internal_r+0x2a0>
 3e8:	a80b883a 	mov	r5,r21
 3ec:	b809883a 	mov	r4,r23
 3f0:	da401015 	stw	r9,64(sp)
 3f4:	00009100 	call	910 <__udivsi3>
 3f8:	a80b883a 	mov	r5,r21
 3fc:	1009883a 	mov	r4,r2
 400:	102d883a 	mov	r22,r2
 404:	00009cc0 	call	9cc <__mulsi3>
 408:	b885c83a 	sub	r2,r23,r2
 40c:	00c00244 	movi	r3,9
 410:	da401017 	ldw	r9,64(sp)
 414:	18800216 	blt	r3,r2,420 <___vfprintf_internal_r+0x27c>
 418:	10800c04 	addi	r2,r2,48
 41c:	00000506 	br	434 <___vfprintf_internal_r+0x290>
 420:	d8c00e17 	ldw	r3,56(sp)
 424:	18000226 	beq	r3,zero,430 <___vfprintf_internal_r+0x28c>
 428:	10800dc4 	addi	r2,r2,55
 42c:	00000106 	br	434 <___vfprintf_internal_r+0x290>
 430:	108015c4 	addi	r2,r2,87
 434:	e0800005 	stb	r2,0(fp)
 438:	b02f883a 	mov	r23,r22
 43c:	e7000044 	addi	fp,fp,1
 440:	003fe806 	br	3e4 <_gp+0xffff73fc>
 444:	e6efc83a 	sub	r23,fp,sp
 448:	9dc5c83a 	sub	r2,r19,r23
 44c:	0080090e 	bge	zero,r2,474 <___vfprintf_internal_r+0x2d0>
 450:	e085883a 	add	r2,fp,r2
 454:	01400c04 	movi	r5,48
 458:	d8c00917 	ldw	r3,36(sp)
 45c:	e009883a 	mov	r4,fp
 460:	e0c0032e 	bgeu	fp,r3,470 <___vfprintf_internal_r+0x2cc>
 464:	e7000044 	addi	fp,fp,1
 468:	21400005 	stb	r5,0(r4)
 46c:	e0bffa1e 	bne	fp,r2,458 <_gp+0xffff7470>
 470:	e6efc83a 	sub	r23,fp,sp
 474:	d8c00b17 	ldw	r3,44(sp)
 478:	4dd1883a 	add	r8,r9,r23
 47c:	922dc83a 	sub	r22,r18,r8
 480:	18001626 	beq	r3,zero,4dc <___vfprintf_internal_r+0x338>
 484:	48000a26 	beq	r9,zero,4b0 <___vfprintf_internal_r+0x30c>
 488:	00800b44 	movi	r2,45
 48c:	d8800805 	stb	r2,32(sp)
 490:	88800117 	ldw	r2,4(r17)
 494:	01c00044 	movi	r7,1
 498:	d9800804 	addi	r6,sp,32
 49c:	880b883a 	mov	r5,r17
 4a0:	a009883a 	mov	r4,r20
 4a4:	103ee83a 	callr	r2
 4a8:	10004a1e 	bne	r2,zero,5d4 <___vfprintf_internal_r+0x430>
 4ac:	84000044 	addi	r16,r16,1
 4b0:	0580070e 	bge	zero,r22,4d0 <___vfprintf_internal_r+0x32c>
 4b4:	b00f883a 	mov	r7,r22
 4b8:	01800c04 	movi	r6,48
 4bc:	880b883a 	mov	r5,r17
 4c0:	a009883a 	mov	r4,r20
 4c4:	00001380 	call	138 <print_repeat>
 4c8:	1000421e 	bne	r2,zero,5d4 <___vfprintf_internal_r+0x430>
 4cc:	85a1883a 	add	r16,r16,r22
 4d0:	e02d883a 	mov	r22,fp
 4d4:	bf2fc83a 	sub	r23,r23,fp
 4d8:	00002006 	br	55c <___vfprintf_internal_r+0x3b8>
 4dc:	0580090e 	bge	zero,r22,504 <___vfprintf_internal_r+0x360>
 4e0:	b00f883a 	mov	r7,r22
 4e4:	01800804 	movi	r6,32
 4e8:	880b883a 	mov	r5,r17
 4ec:	a009883a 	mov	r4,r20
 4f0:	da401015 	stw	r9,64(sp)
 4f4:	00001380 	call	138 <print_repeat>
 4f8:	da401017 	ldw	r9,64(sp)
 4fc:	1000351e 	bne	r2,zero,5d4 <___vfprintf_internal_r+0x430>
 500:	85a1883a 	add	r16,r16,r22
 504:	483ff226 	beq	r9,zero,4d0 <_gp+0xffff74e8>
 508:	00800b44 	movi	r2,45
 50c:	d8800805 	stb	r2,32(sp)
 510:	88800117 	ldw	r2,4(r17)
 514:	01c00044 	movi	r7,1
 518:	d9800804 	addi	r6,sp,32
 51c:	880b883a 	mov	r5,r17
 520:	a009883a 	mov	r4,r20
 524:	103ee83a 	callr	r2
 528:	10002a1e 	bne	r2,zero,5d4 <___vfprintf_internal_r+0x430>
 52c:	84000044 	addi	r16,r16,1
 530:	003fe706 	br	4d0 <_gp+0xffff74e8>
 534:	b5bfffc4 	addi	r22,r22,-1
 538:	b0800003 	ldbu	r2,0(r22)
 53c:	01c00044 	movi	r7,1
 540:	d9800804 	addi	r6,sp,32
 544:	d8800805 	stb	r2,32(sp)
 548:	88800117 	ldw	r2,4(r17)
 54c:	880b883a 	mov	r5,r17
 550:	a009883a 	mov	r4,r20
 554:	103ee83a 	callr	r2
 558:	10001e1e 	bne	r2,zero,5d4 <___vfprintf_internal_r+0x430>
 55c:	8585c83a 	sub	r2,r16,r22
 560:	b5c9883a 	add	r4,r22,r23
 564:	e085883a 	add	r2,fp,r2
 568:	013ff216 	blt	zero,r4,534 <_gp+0xffff754c>
 56c:	1021883a 	mov	r16,r2
 570:	dd800d17 	ldw	r22,52(sp)
 574:	00004406 	br	688 <___vfprintf_internal_r+0x4e4>
 578:	00800044 	movi	r2,1
 57c:	1480080e 	bge	r2,r18,5a0 <___vfprintf_internal_r+0x3fc>
 580:	95ffffc4 	addi	r23,r18,-1
 584:	b80f883a 	mov	r7,r23
 588:	01800804 	movi	r6,32
 58c:	880b883a 	mov	r5,r17
 590:	a009883a 	mov	r4,r20
 594:	00001380 	call	138 <print_repeat>
 598:	10000e1e 	bne	r2,zero,5d4 <___vfprintf_internal_r+0x430>
 59c:	85e1883a 	add	r16,r16,r23
 5a0:	b0800017 	ldw	r2,0(r22)
 5a4:	01c00044 	movi	r7,1
 5a8:	d80d883a 	mov	r6,sp
 5ac:	d8800005 	stb	r2,0(sp)
 5b0:	88800117 	ldw	r2,4(r17)
 5b4:	880b883a 	mov	r5,r17
 5b8:	a009883a 	mov	r4,r20
 5bc:	b5c00104 	addi	r23,r22,4
 5c0:	103ee83a 	callr	r2
 5c4:	1000031e 	bne	r2,zero,5d4 <___vfprintf_internal_r+0x430>
 5c8:	84000044 	addi	r16,r16,1
 5cc:	b82d883a 	mov	r22,r23
 5d0:	00002d06 	br	688 <___vfprintf_internal_r+0x4e4>
 5d4:	00bfffc4 	movi	r2,-1
 5d8:	00003106 	br	6a0 <___vfprintf_internal_r+0x4fc>
 5dc:	b5c00017 	ldw	r23,0(r22)
 5e0:	b7000104 	addi	fp,r22,4
 5e4:	b809883a 	mov	r4,r23
 5e8:	00007a40 	call	7a4 <strlen>
 5ec:	9091c83a 	sub	r8,r18,r2
 5f0:	102d883a 	mov	r22,r2
 5f4:	0200090e 	bge	zero,r8,61c <___vfprintf_internal_r+0x478>
 5f8:	400f883a 	mov	r7,r8
 5fc:	01800804 	movi	r6,32
 600:	880b883a 	mov	r5,r17
 604:	a009883a 	mov	r4,r20
 608:	da001015 	stw	r8,64(sp)
 60c:	00001380 	call	138 <print_repeat>
 610:	da001017 	ldw	r8,64(sp)
 614:	103fef1e 	bne	r2,zero,5d4 <_gp+0xffff75ec>
 618:	8221883a 	add	r16,r16,r8
 61c:	88800117 	ldw	r2,4(r17)
 620:	b00f883a 	mov	r7,r22
 624:	b80d883a 	mov	r6,r23
 628:	880b883a 	mov	r5,r17
 62c:	a009883a 	mov	r4,r20
 630:	103ee83a 	callr	r2
 634:	103fe71e 	bne	r2,zero,5d4 <_gp+0xffff75ec>
 638:	85a1883a 	add	r16,r16,r22
 63c:	e02d883a 	mov	r22,fp
 640:	00001106 	br	688 <___vfprintf_internal_r+0x4e4>
 644:	00c00044 	movi	r3,1
 648:	04ffffc4 	movi	r19,-1
 64c:	d8000e15 	stw	zero,56(sp)
 650:	d8c00a15 	stw	r3,40(sp)
 654:	05400284 	movi	r21,10
 658:	9825883a 	mov	r18,r19
 65c:	d8000c15 	stw	zero,48(sp)
 660:	d8000b15 	stw	zero,44(sp)
 664:	182f883a 	mov	r23,r3
 668:	00000806 	br	68c <___vfprintf_internal_r+0x4e8>
 66c:	ddc00b15 	stw	r23,44(sp)
 670:	05c00084 	movi	r23,2
 674:	00000506 	br	68c <___vfprintf_internal_r+0x4e8>
 678:	00c00044 	movi	r3,1
 67c:	d8c00c15 	stw	r3,48(sp)
 680:	05c000c4 	movi	r23,3
 684:	00000106 	br	68c <___vfprintf_internal_r+0x4e8>
 688:	002f883a 	mov	r23,zero
 68c:	d8c00f17 	ldw	r3,60(sp)
 690:	18c00044 	addi	r3,r3,1
 694:	d8c00f15 	stw	r3,60(sp)
 698:	003edc06 	br	20c <_gp+0xffff7224>
 69c:	8005883a 	mov	r2,r16
 6a0:	dfc01a17 	ldw	ra,104(sp)
 6a4:	df001917 	ldw	fp,100(sp)
 6a8:	ddc01817 	ldw	r23,96(sp)
 6ac:	dd801717 	ldw	r22,92(sp)
 6b0:	dd401617 	ldw	r21,88(sp)
 6b4:	dd001517 	ldw	r20,84(sp)
 6b8:	dcc01417 	ldw	r19,80(sp)
 6bc:	dc801317 	ldw	r18,76(sp)
 6c0:	dc401217 	ldw	r17,72(sp)
 6c4:	dc001117 	ldw	r16,68(sp)
 6c8:	dec01b04 	addi	sp,sp,108
 6cc:	f800283a 	ret

000006d0 <__vfprintf_internal>:
 6d0:	00800034 	movhi	r2,0
 6d4:	1083fb04 	addi	r2,r2,4076
 6d8:	300f883a 	mov	r7,r6
 6dc:	280d883a 	mov	r6,r5
 6e0:	200b883a 	mov	r5,r4
 6e4:	11000017 	ldw	r4,0(r2)
 6e8:	00001a41 	jmpi	1a4 <___vfprintf_internal_r>

000006ec <__sfvwrite_small_dev>:
 6ec:	2880000b 	ldhu	r2,0(r5)
 6f0:	1080020c 	andi	r2,r2,8
 6f4:	10002126 	beq	r2,zero,77c <__sfvwrite_small_dev+0x90>
 6f8:	2880008f 	ldh	r2,2(r5)
 6fc:	defffa04 	addi	sp,sp,-24
 700:	dc000015 	stw	r16,0(sp)
 704:	dfc00515 	stw	ra,20(sp)
 708:	dd000415 	stw	r20,16(sp)
 70c:	dcc00315 	stw	r19,12(sp)
 710:	dc800215 	stw	r18,8(sp)
 714:	dc400115 	stw	r17,4(sp)
 718:	2821883a 	mov	r16,r5
 71c:	10001216 	blt	r2,zero,768 <__sfvwrite_small_dev+0x7c>
 720:	2027883a 	mov	r19,r4
 724:	3025883a 	mov	r18,r6
 728:	3823883a 	mov	r17,r7
 72c:	05010004 	movi	r20,1024
 730:	04400b0e 	bge	zero,r17,760 <__sfvwrite_small_dev+0x74>
 734:	880f883a 	mov	r7,r17
 738:	a440010e 	bge	r20,r17,740 <__sfvwrite_small_dev+0x54>
 73c:	01c10004 	movi	r7,1024
 740:	8140008f 	ldh	r5,2(r16)
 744:	900d883a 	mov	r6,r18
 748:	9809883a 	mov	r4,r19
 74c:	00007c00 	call	7c0 <_write_r>
 750:	0080050e 	bge	zero,r2,768 <__sfvwrite_small_dev+0x7c>
 754:	88a3c83a 	sub	r17,r17,r2
 758:	90a5883a 	add	r18,r18,r2
 75c:	003ff406 	br	730 <_gp+0xffff7748>
 760:	0005883a 	mov	r2,zero
 764:	00000706 	br	784 <__sfvwrite_small_dev+0x98>
 768:	8080000b 	ldhu	r2,0(r16)
 76c:	10801014 	ori	r2,r2,64
 770:	8080000d 	sth	r2,0(r16)
 774:	00bfffc4 	movi	r2,-1
 778:	00000206 	br	784 <__sfvwrite_small_dev+0x98>
 77c:	00bfffc4 	movi	r2,-1
 780:	f800283a 	ret
 784:	dfc00517 	ldw	ra,20(sp)
 788:	dd000417 	ldw	r20,16(sp)
 78c:	dcc00317 	ldw	r19,12(sp)
 790:	dc800217 	ldw	r18,8(sp)
 794:	dc400117 	ldw	r17,4(sp)
 798:	dc000017 	ldw	r16,0(sp)
 79c:	dec00604 	addi	sp,sp,24
 7a0:	f800283a 	ret

000007a4 <strlen>:
 7a4:	2005883a 	mov	r2,r4
 7a8:	10c00007 	ldb	r3,0(r2)
 7ac:	18000226 	beq	r3,zero,7b8 <strlen+0x14>
 7b0:	10800044 	addi	r2,r2,1
 7b4:	003ffc06 	br	7a8 <_gp+0xffff77c0>
 7b8:	1105c83a 	sub	r2,r2,r4
 7bc:	f800283a 	ret

000007c0 <_write_r>:
 7c0:	defffd04 	addi	sp,sp,-12
 7c4:	dc000015 	stw	r16,0(sp)
 7c8:	04000034 	movhi	r16,0
 7cc:	dc400115 	stw	r17,4(sp)
 7d0:	84043a04 	addi	r16,r16,4328
 7d4:	2023883a 	mov	r17,r4
 7d8:	2809883a 	mov	r4,r5
 7dc:	300b883a 	mov	r5,r6
 7e0:	380d883a 	mov	r6,r7
 7e4:	dfc00215 	stw	ra,8(sp)
 7e8:	80000015 	stw	zero,0(r16)
 7ec:	0000ba00 	call	ba0 <write>
 7f0:	00ffffc4 	movi	r3,-1
 7f4:	10c0031e 	bne	r2,r3,804 <_write_r+0x44>
 7f8:	80c00017 	ldw	r3,0(r16)
 7fc:	18000126 	beq	r3,zero,804 <_write_r+0x44>
 800:	88c00015 	stw	r3,0(r17)
 804:	dfc00217 	ldw	ra,8(sp)
 808:	dc400117 	ldw	r17,4(sp)
 80c:	dc000017 	ldw	r16,0(sp)
 810:	dec00304 	addi	sp,sp,12
 814:	f800283a 	ret

00000818 <__divsi3>:
 818:	20001b16 	blt	r4,zero,888 <__divsi3+0x70>
 81c:	000f883a 	mov	r7,zero
 820:	28001616 	blt	r5,zero,87c <__divsi3+0x64>
 824:	200d883a 	mov	r6,r4
 828:	29001a2e 	bgeu	r5,r4,894 <__divsi3+0x7c>
 82c:	00800804 	movi	r2,32
 830:	00c00044 	movi	r3,1
 834:	00000106 	br	83c <__divsi3+0x24>
 838:	10000d26 	beq	r2,zero,870 <__divsi3+0x58>
 83c:	294b883a 	add	r5,r5,r5
 840:	10bfffc4 	addi	r2,r2,-1
 844:	18c7883a 	add	r3,r3,r3
 848:	293ffb36 	bltu	r5,r4,838 <_gp+0xffff7850>
 84c:	0005883a 	mov	r2,zero
 850:	18000726 	beq	r3,zero,870 <__divsi3+0x58>
 854:	0005883a 	mov	r2,zero
 858:	31400236 	bltu	r6,r5,864 <__divsi3+0x4c>
 85c:	314dc83a 	sub	r6,r6,r5
 860:	10c4b03a 	or	r2,r2,r3
 864:	1806d07a 	srli	r3,r3,1
 868:	280ad07a 	srli	r5,r5,1
 86c:	183ffa1e 	bne	r3,zero,858 <_gp+0xffff7870>
 870:	38000126 	beq	r7,zero,878 <__divsi3+0x60>
 874:	0085c83a 	sub	r2,zero,r2
 878:	f800283a 	ret
 87c:	014bc83a 	sub	r5,zero,r5
 880:	39c0005c 	xori	r7,r7,1
 884:	003fe706 	br	824 <_gp+0xffff783c>
 888:	0109c83a 	sub	r4,zero,r4
 88c:	01c00044 	movi	r7,1
 890:	003fe306 	br	820 <_gp+0xffff7838>
 894:	00c00044 	movi	r3,1
 898:	003fee06 	br	854 <_gp+0xffff786c>

0000089c <__modsi3>:
 89c:	20001716 	blt	r4,zero,8fc <__modsi3+0x60>
 8a0:	000f883a 	mov	r7,zero
 8a4:	2005883a 	mov	r2,r4
 8a8:	28001216 	blt	r5,zero,8f4 <__modsi3+0x58>
 8ac:	2900162e 	bgeu	r5,r4,908 <__modsi3+0x6c>
 8b0:	01800804 	movi	r6,32
 8b4:	00c00044 	movi	r3,1
 8b8:	00000106 	br	8c0 <__modsi3+0x24>
 8bc:	30000a26 	beq	r6,zero,8e8 <__modsi3+0x4c>
 8c0:	294b883a 	add	r5,r5,r5
 8c4:	31bfffc4 	addi	r6,r6,-1
 8c8:	18c7883a 	add	r3,r3,r3
 8cc:	293ffb36 	bltu	r5,r4,8bc <_gp+0xffff78d4>
 8d0:	18000526 	beq	r3,zero,8e8 <__modsi3+0x4c>
 8d4:	1806d07a 	srli	r3,r3,1
 8d8:	11400136 	bltu	r2,r5,8e0 <__modsi3+0x44>
 8dc:	1145c83a 	sub	r2,r2,r5
 8e0:	280ad07a 	srli	r5,r5,1
 8e4:	183ffb1e 	bne	r3,zero,8d4 <_gp+0xffff78ec>
 8e8:	38000126 	beq	r7,zero,8f0 <__modsi3+0x54>
 8ec:	0085c83a 	sub	r2,zero,r2
 8f0:	f800283a 	ret
 8f4:	014bc83a 	sub	r5,zero,r5
 8f8:	003fec06 	br	8ac <_gp+0xffff78c4>
 8fc:	0109c83a 	sub	r4,zero,r4
 900:	01c00044 	movi	r7,1
 904:	003fe706 	br	8a4 <_gp+0xffff78bc>
 908:	00c00044 	movi	r3,1
 90c:	003ff106 	br	8d4 <_gp+0xffff78ec>

00000910 <__udivsi3>:
 910:	200d883a 	mov	r6,r4
 914:	2900152e 	bgeu	r5,r4,96c <__udivsi3+0x5c>
 918:	28001416 	blt	r5,zero,96c <__udivsi3+0x5c>
 91c:	00800804 	movi	r2,32
 920:	00c00044 	movi	r3,1
 924:	00000206 	br	930 <__udivsi3+0x20>
 928:	10000e26 	beq	r2,zero,964 <__udivsi3+0x54>
 92c:	28000516 	blt	r5,zero,944 <__udivsi3+0x34>
 930:	294b883a 	add	r5,r5,r5
 934:	10bfffc4 	addi	r2,r2,-1
 938:	18c7883a 	add	r3,r3,r3
 93c:	293ffa36 	bltu	r5,r4,928 <_gp+0xffff7940>
 940:	18000826 	beq	r3,zero,964 <__udivsi3+0x54>
 944:	0005883a 	mov	r2,zero
 948:	31400236 	bltu	r6,r5,954 <__udivsi3+0x44>
 94c:	314dc83a 	sub	r6,r6,r5
 950:	10c4b03a 	or	r2,r2,r3
 954:	1806d07a 	srli	r3,r3,1
 958:	280ad07a 	srli	r5,r5,1
 95c:	183ffa1e 	bne	r3,zero,948 <_gp+0xffff7960>
 960:	f800283a 	ret
 964:	0005883a 	mov	r2,zero
 968:	f800283a 	ret
 96c:	00c00044 	movi	r3,1
 970:	003ff406 	br	944 <_gp+0xffff795c>

00000974 <__umodsi3>:
 974:	2005883a 	mov	r2,r4
 978:	2900122e 	bgeu	r5,r4,9c4 <__umodsi3+0x50>
 97c:	28001116 	blt	r5,zero,9c4 <__umodsi3+0x50>
 980:	01800804 	movi	r6,32
 984:	00c00044 	movi	r3,1
 988:	00000206 	br	994 <__umodsi3+0x20>
 98c:	30000c26 	beq	r6,zero,9c0 <__umodsi3+0x4c>
 990:	28000516 	blt	r5,zero,9a8 <__umodsi3+0x34>
 994:	294b883a 	add	r5,r5,r5
 998:	31bfffc4 	addi	r6,r6,-1
 99c:	18c7883a 	add	r3,r3,r3
 9a0:	293ffa36 	bltu	r5,r4,98c <_gp+0xffff79a4>
 9a4:	18000626 	beq	r3,zero,9c0 <__umodsi3+0x4c>
 9a8:	1806d07a 	srli	r3,r3,1
 9ac:	11400136 	bltu	r2,r5,9b4 <__umodsi3+0x40>
 9b0:	1145c83a 	sub	r2,r2,r5
 9b4:	280ad07a 	srli	r5,r5,1
 9b8:	183ffb1e 	bne	r3,zero,9a8 <_gp+0xffff79c0>
 9bc:	f800283a 	ret
 9c0:	f800283a 	ret
 9c4:	00c00044 	movi	r3,1
 9c8:	003ff706 	br	9a8 <_gp+0xffff79c0>

000009cc <__mulsi3>:
 9cc:	0005883a 	mov	r2,zero
 9d0:	20000726 	beq	r4,zero,9f0 <__mulsi3+0x24>
 9d4:	20c0004c 	andi	r3,r4,1
 9d8:	2008d07a 	srli	r4,r4,1
 9dc:	18000126 	beq	r3,zero,9e4 <__mulsi3+0x18>
 9e0:	1145883a 	add	r2,r2,r5
 9e4:	294b883a 	add	r5,r5,r5
 9e8:	203ffa1e 	bne	r4,zero,9d4 <_gp+0xffff79ec>
 9ec:	f800283a 	ret
 9f0:	f800283a 	ret

000009f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 9f4:	defffc04 	addi	sp,sp,-16
 9f8:	df000315 	stw	fp,12(sp)
 9fc:	df000304 	addi	fp,sp,12
 a00:	e13ffd15 	stw	r4,-12(fp)
 a04:	e17ffe15 	stw	r5,-8(fp)
 a08:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 a0c:	e0fffe17 	ldw	r3,-8(fp)
 a10:	e0bffd17 	ldw	r2,-12(fp)
 a14:	18800c26 	beq	r3,r2,a48 <alt_load_section+0x54>
  {
    while( to != end )
 a18:	00000806 	br	a3c <alt_load_section+0x48>
    {
      *to++ = *from++;
 a1c:	e0bffe17 	ldw	r2,-8(fp)
 a20:	10c00104 	addi	r3,r2,4
 a24:	e0fffe15 	stw	r3,-8(fp)
 a28:	e0fffd17 	ldw	r3,-12(fp)
 a2c:	19000104 	addi	r4,r3,4
 a30:	e13ffd15 	stw	r4,-12(fp)
 a34:	18c00017 	ldw	r3,0(r3)
 a38:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 a3c:	e0fffe17 	ldw	r3,-8(fp)
 a40:	e0bfff17 	ldw	r2,-4(fp)
 a44:	18bff51e 	bne	r3,r2,a1c <_gp+0xffff7a34>
    {
      *to++ = *from++;
    }
  }
}
 a48:	0001883a 	nop
 a4c:	e037883a 	mov	sp,fp
 a50:	df000017 	ldw	fp,0(sp)
 a54:	dec00104 	addi	sp,sp,4
 a58:	f800283a 	ret

00000a5c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 a5c:	defffe04 	addi	sp,sp,-8
 a60:	dfc00115 	stw	ra,4(sp)
 a64:	df000015 	stw	fp,0(sp)
 a68:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 a6c:	01800034 	movhi	r6,0
 a70:	3183fe04 	addi	r6,r6,4088
 a74:	01400034 	movhi	r5,0
 a78:	2943c204 	addi	r5,r5,3848
 a7c:	01000034 	movhi	r4,0
 a80:	2103fe04 	addi	r4,r4,4088
 a84:	00009f40 	call	9f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 a88:	01800034 	movhi	r6,0
 a8c:	31800804 	addi	r6,r6,32
 a90:	01400034 	movhi	r5,0
 a94:	29400804 	addi	r5,r5,32
 a98:	01000034 	movhi	r4,0
 a9c:	21000804 	addi	r4,r4,32
 aa0:	00009f40 	call	9f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 aa4:	01800034 	movhi	r6,0
 aa8:	3183c204 	addi	r6,r6,3848
 aac:	01400034 	movhi	r5,0
 ab0:	2943b904 	addi	r5,r5,3812
 ab4:	01000034 	movhi	r4,0
 ab8:	2103b904 	addi	r4,r4,3812
 abc:	00009f40 	call	9f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 ac0:	0000e800 	call	e80 <alt_dcache_flush_all>
  alt_icache_flush_all();
 ac4:	0000ea00 	call	ea0 <alt_icache_flush_all>
}
 ac8:	0001883a 	nop
 acc:	e037883a 	mov	sp,fp
 ad0:	dfc00117 	ldw	ra,4(sp)
 ad4:	df000017 	ldw	fp,0(sp)
 ad8:	dec00204 	addi	sp,sp,8
 adc:	f800283a 	ret

00000ae0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 ae0:	defffe04 	addi	sp,sp,-8
 ae4:	dfc00115 	stw	ra,4(sp)
 ae8:	df000015 	stw	fp,0(sp)
 aec:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 af0:	0009883a 	mov	r4,zero
 af4:	0000c3c0 	call	c3c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 af8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 afc:	0000c740 	call	c74 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 b00:	d0a04117 	ldw	r2,-32508(gp)
 b04:	d0e04217 	ldw	r3,-32504(gp)
 b08:	d1204317 	ldw	r4,-32500(gp)
 b0c:	200d883a 	mov	r6,r4
 b10:	180b883a 	mov	r5,r3
 b14:	1009883a 	mov	r4,r2
 b18:	000005c0 	call	5c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 b1c:	0001883a 	nop
 b20:	e037883a 	mov	sp,fp
 b24:	dfc00117 	ldw	ra,4(sp)
 b28:	df000017 	ldw	fp,0(sp)
 b2c:	dec00204 	addi	sp,sp,8
 b30:	f800283a 	ret

00000b34 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 b34:	defffd04 	addi	sp,sp,-12
 b38:	dfc00215 	stw	ra,8(sp)
 b3c:	df000115 	stw	fp,4(sp)
 b40:	df000104 	addi	fp,sp,4
 b44:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 b48:	e13fff17 	ldw	r4,-4(fp)
 b4c:	0000d280 	call	d28 <alt_busy_sleep>
}
 b50:	e037883a 	mov	sp,fp
 b54:	dfc00117 	ldw	ra,4(sp)
 b58:	df000017 	ldw	fp,0(sp)
 b5c:	dec00204 	addi	sp,sp,8
 b60:	f800283a 	ret

00000b64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 b64:	defffe04 	addi	sp,sp,-8
 b68:	dfc00115 	stw	ra,4(sp)
 b6c:	df000015 	stw	fp,0(sp)
 b70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 b74:	d0a00317 	ldw	r2,-32756(gp)
 b78:	10000326 	beq	r2,zero,b88 <alt_get_errno+0x24>
 b7c:	d0a00317 	ldw	r2,-32756(gp)
 b80:	103ee83a 	callr	r2
 b84:	00000106 	br	b8c <alt_get_errno+0x28>
 b88:	d0a04004 	addi	r2,gp,-32512
}
 b8c:	e037883a 	mov	sp,fp
 b90:	dfc00117 	ldw	ra,4(sp)
 b94:	df000017 	ldw	fp,0(sp)
 b98:	dec00204 	addi	sp,sp,8
 b9c:	f800283a 	ret

00000ba0 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 ba0:	defffb04 	addi	sp,sp,-20
 ba4:	dfc00415 	stw	ra,16(sp)
 ba8:	df000315 	stw	fp,12(sp)
 bac:	df000304 	addi	fp,sp,12
 bb0:	e13ffd15 	stw	r4,-12(fp)
 bb4:	e17ffe15 	stw	r5,-8(fp)
 bb8:	e1bfff15 	stw	r6,-4(fp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 bbc:	e0bffd17 	ldw	r2,-12(fp)
 bc0:	10c00060 	cmpeqi	r3,r2,1
 bc4:	1800031e 	bne	r3,zero,bd4 <write+0x34>
 bc8:	108000a0 	cmpeqi	r2,r2,2
 bcc:	1000091e 	bne	r2,zero,bf4 <write+0x54>
 bd0:	00001006 	br	c14 <write+0x74>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
 bd4:	e0bfff17 	ldw	r2,-4(fp)
 bd8:	000f883a 	mov	r7,zero
 bdc:	100d883a 	mov	r6,r2
 be0:	e17ffe17 	ldw	r5,-8(fp)
 be4:	01000034 	movhi	r4,0
 be8:	2103fc04 	addi	r4,r4,4080
 bec:	0000c940 	call	c94 <altera_avalon_jtag_uart_write>
 bf0:	00000d06 	br	c28 <write+0x88>
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 bf4:	e0bfff17 	ldw	r2,-4(fp)
 bf8:	000f883a 	mov	r7,zero
 bfc:	100d883a 	mov	r6,r2
 c00:	e17ffe17 	ldw	r5,-8(fp)
 c04:	01000034 	movhi	r4,0
 c08:	2103fc04 	addi	r4,r4,4080
 c0c:	0000c940 	call	c94 <altera_avalon_jtag_uart_write>
 c10:	00000506 	br	c28 <write+0x88>
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 c14:	0000b640 	call	b64 <alt_get_errno>
 c18:	1007883a 	mov	r3,r2
 c1c:	00801444 	movi	r2,81
 c20:	18800015 	stw	r2,0(r3)
        return -1;
 c24:	00bfffc4 	movi	r2,-1
    }
}
 c28:	e037883a 	mov	sp,fp
 c2c:	dfc00117 	ldw	ra,4(sp)
 c30:	df000017 	ldw	fp,0(sp)
 c34:	dec00204 	addi	sp,sp,8
 c38:	f800283a 	ret

00000c3c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c3c:	defffd04 	addi	sp,sp,-12
 c40:	dfc00215 	stw	ra,8(sp)
 c44:	df000115 	stw	fp,4(sp)
 c48:	df000104 	addi	fp,sp,4
 c4c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 c50:	0000ec00 	call	ec0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c54:	00800044 	movi	r2,1
 c58:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c5c:	0001883a 	nop
 c60:	e037883a 	mov	sp,fp
 c64:	dfc00117 	ldw	ra,4(sp)
 c68:	df000017 	ldw	fp,0(sp)
 c6c:	dec00204 	addi	sp,sp,8
 c70:	f800283a 	ret

00000c74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c74:	deffff04 	addi	sp,sp,-4
 c78:	df000015 	stw	fp,0(sp)
 c7c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
 c80:	0001883a 	nop
 c84:	e037883a 	mov	sp,fp
 c88:	df000017 	ldw	fp,0(sp)
 c8c:	dec00104 	addi	sp,sp,4
 c90:	f800283a 	ret

00000c94 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c94:	defff904 	addi	sp,sp,-28
 c98:	df000615 	stw	fp,24(sp)
 c9c:	df000604 	addi	fp,sp,24
 ca0:	e13ffc15 	stw	r4,-16(fp)
 ca4:	e17ffd15 	stw	r5,-12(fp)
 ca8:	e1bffe15 	stw	r6,-8(fp)
 cac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 cb0:	e0bffc17 	ldw	r2,-16(fp)
 cb4:	10800017 	ldw	r2,0(r2)
 cb8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 cbc:	e0bffe17 	ldw	r2,-8(fp)
 cc0:	e0fffd17 	ldw	r3,-12(fp)
 cc4:	1885883a 	add	r2,r3,r2
 cc8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 ccc:	00000e06 	br	d08 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 cd0:	e0bffa17 	ldw	r2,-24(fp)
 cd4:	10800104 	addi	r2,r2,4
 cd8:	10800037 	ldwio	r2,0(r2)
 cdc:	10bfffec 	andhi	r2,r2,65535
 ce0:	10000926 	beq	r2,zero,d08 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 ce4:	e0fffa17 	ldw	r3,-24(fp)
 ce8:	e0bffd17 	ldw	r2,-12(fp)
 cec:	11000044 	addi	r4,r2,1
 cf0:	e13ffd15 	stw	r4,-12(fp)
 cf4:	10800003 	ldbu	r2,0(r2)
 cf8:	10803fcc 	andi	r2,r2,255
 cfc:	1080201c 	xori	r2,r2,128
 d00:	10bfe004 	addi	r2,r2,-128
 d04:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 d08:	e0fffd17 	ldw	r3,-12(fp)
 d0c:	e0bffb17 	ldw	r2,-20(fp)
 d10:	18bfef36 	bltu	r3,r2,cd0 <_gp+0xffff7ce8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 d14:	e0bffe17 	ldw	r2,-8(fp)
}
 d18:	e037883a 	mov	sp,fp
 d1c:	df000017 	ldw	fp,0(sp)
 d20:	dec00104 	addi	sp,sp,4
 d24:	f800283a 	ret

00000d28 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 d28:	defffa04 	addi	sp,sp,-24
 d2c:	dfc00515 	stw	ra,20(sp)
 d30:	df000415 	stw	fp,16(sp)
 d34:	df000404 	addi	fp,sp,16
 d38:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 d3c:	00800244 	movi	r2,9
 d40:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 d44:	014003f4 	movhi	r5,15
 d48:	29509004 	addi	r5,r5,16960
 d4c:	e13ffd17 	ldw	r4,-12(fp)
 d50:	00009cc0 	call	9cc <__mulsi3>
 d54:	100b883a 	mov	r5,r2
 d58:	0100bef4 	movhi	r4,763
 d5c:	213c2004 	addi	r4,r4,-3968
 d60:	00009100 	call	910 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 d64:	100b883a 	mov	r5,r2
 d68:	01200034 	movhi	r4,32768
 d6c:	213fffc4 	addi	r4,r4,-1
 d70:	00009100 	call	910 <__udivsi3>
 d74:	100b883a 	mov	r5,r2
 d78:	e13fff17 	ldw	r4,-4(fp)
 d7c:	00009100 	call	910 <__udivsi3>
 d80:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 d84:	e0bffe17 	ldw	r2,-8(fp)
 d88:	10002a26 	beq	r2,zero,e34 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 d8c:	e03ffc15 	stw	zero,-16(fp)
 d90:	00001706 	br	df0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 d94:	00a00034 	movhi	r2,32768
 d98:	10bfffc4 	addi	r2,r2,-1
 d9c:	10bfffc4 	addi	r2,r2,-1
 da0:	103ffe1e 	bne	r2,zero,d9c <_gp+0xffff7db4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 da4:	014003f4 	movhi	r5,15
 da8:	29509004 	addi	r5,r5,16960
 dac:	e13ffd17 	ldw	r4,-12(fp)
 db0:	00009cc0 	call	9cc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 db4:	100b883a 	mov	r5,r2
 db8:	0100bef4 	movhi	r4,763
 dbc:	213c2004 	addi	r4,r4,-3968
 dc0:	00009100 	call	910 <__udivsi3>
 dc4:	100b883a 	mov	r5,r2
 dc8:	01200034 	movhi	r4,32768
 dcc:	213fffc4 	addi	r4,r4,-1
 dd0:	00009100 	call	910 <__udivsi3>
 dd4:	1007883a 	mov	r3,r2
 dd8:	e0bfff17 	ldw	r2,-4(fp)
 ddc:	10c5c83a 	sub	r2,r2,r3
 de0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 de4:	e0bffc17 	ldw	r2,-16(fp)
 de8:	10800044 	addi	r2,r2,1
 dec:	e0bffc15 	stw	r2,-16(fp)
 df0:	e0fffc17 	ldw	r3,-16(fp)
 df4:	e0bffe17 	ldw	r2,-8(fp)
 df8:	18bfe616 	blt	r3,r2,d94 <_gp+0xffff7dac>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 dfc:	014003f4 	movhi	r5,15
 e00:	29509004 	addi	r5,r5,16960
 e04:	e13ffd17 	ldw	r4,-12(fp)
 e08:	00009cc0 	call	9cc <__mulsi3>
 e0c:	100b883a 	mov	r5,r2
 e10:	0100bef4 	movhi	r4,763
 e14:	213c2004 	addi	r4,r4,-3968
 e18:	00009100 	call	910 <__udivsi3>
 e1c:	e17fff17 	ldw	r5,-4(fp)
 e20:	1009883a 	mov	r4,r2
 e24:	00009cc0 	call	9cc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 e28:	10bfffc4 	addi	r2,r2,-1
 e2c:	103ffe1e 	bne	r2,zero,e28 <_gp+0xffff7e40>
 e30:	00000d06 	br	e68 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 e34:	014003f4 	movhi	r5,15
 e38:	29509004 	addi	r5,r5,16960
 e3c:	e13ffd17 	ldw	r4,-12(fp)
 e40:	00009cc0 	call	9cc <__mulsi3>
 e44:	100b883a 	mov	r5,r2
 e48:	0100bef4 	movhi	r4,763
 e4c:	213c2004 	addi	r4,r4,-3968
 e50:	00009100 	call	910 <__udivsi3>
 e54:	e17fff17 	ldw	r5,-4(fp)
 e58:	1009883a 	mov	r4,r2
 e5c:	00009cc0 	call	9cc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 e60:	10bfffc4 	addi	r2,r2,-1
 e64:	00bffe16 	blt	zero,r2,e60 <_gp+0xffff7e78>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 e68:	0005883a 	mov	r2,zero
}
 e6c:	e037883a 	mov	sp,fp
 e70:	dfc00117 	ldw	ra,4(sp)
 e74:	df000017 	ldw	fp,0(sp)
 e78:	dec00204 	addi	sp,sp,8
 e7c:	f800283a 	ret

00000e80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 e80:	deffff04 	addi	sp,sp,-4
 e84:	df000015 	stw	fp,0(sp)
 e88:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 e8c:	0001883a 	nop
 e90:	e037883a 	mov	sp,fp
 e94:	df000017 	ldw	fp,0(sp)
 e98:	dec00104 	addi	sp,sp,4
 e9c:	f800283a 	ret

00000ea0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 ea0:	deffff04 	addi	sp,sp,-4
 ea4:	df000015 	stw	fp,0(sp)
 ea8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 eac:	0001883a 	nop
 eb0:	e037883a 	mov	sp,fp
 eb4:	df000017 	ldw	fp,0(sp)
 eb8:	dec00104 	addi	sp,sp,4
 ebc:	f800283a 	ret

00000ec0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 ec0:	deffff04 	addi	sp,sp,-4
 ec4:	df000015 	stw	fp,0(sp)
 ec8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 ecc:	000170fa 	wrctl	ienable,zero
}
 ed0:	0001883a 	nop
 ed4:	e037883a 	mov	sp,fp
 ed8:	df000017 	ldw	fp,0(sp)
 edc:	dec00104 	addi	sp,sp,4
 ee0:	f800283a 	ret
