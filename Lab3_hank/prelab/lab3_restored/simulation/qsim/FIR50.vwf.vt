// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/07/2019 11:04:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FIR50
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FIR50_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] signal_in;
reg [7:0] taps;
// wires                                               
wire [15:0] signal_out;

// assign statements (if any)                          
FIR50 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.signal_in(signal_in),
	.signal_out(signal_out),
	.taps(taps)
);
initial 
begin 
#4000000 $stop;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// signal_in[ 15 ]
initial
begin
	signal_in[15] = 1'b1;
	signal_in[15] = #100000 1'b0;
	signal_in[15] = #100000 1'b1;
	signal_in[15] = #400000 1'b0;
	signal_in[15] = #300000 1'b1;
	signal_in[15] = #100000 1'b0;
	signal_in[15] = #100000 1'b1;
	signal_in[15] = #100000 1'b0;
	signal_in[15] = #100000 1'b1;
	signal_in[15] = #500000 1'b0;
	signal_in[15] = #200000 1'b1;
	signal_in[15] = #100000 1'b0;
	signal_in[15] = #300000 1'b1;
	signal_in[15] = #100000 1'b0;
	signal_in[15] = #100000 1'b1;
	signal_in[15] = #200000 1'b0;
	signal_in[15] = #100000 1'b1;
	signal_in[15] = #200000 1'b0;
	signal_in[15] = #400000 1'b1;
end 
// signal_in[ 14 ]
initial
begin
	signal_in[14] = 1'b0;
	signal_in[14] = #100000 1'b1;
	signal_in[14] = #200000 1'b0;
	signal_in[14] = #100000 1'b1;
	signal_in[14] = #300000 1'b0;
	signal_in[14] = #200000 1'b1;
	signal_in[14] = #100000 1'b0;
	signal_in[14] = #300000 1'b1;
	signal_in[14] = #100000 1'b0;
	signal_in[14] = #100000 1'b1;
	signal_in[14] = #100000 1'b0;
	signal_in[14] = #200000 1'b1;
	signal_in[14] = #300000 1'b0;
	signal_in[14] = #100000 1'b1;
	signal_in[14] = #100000 1'b0;
	signal_in[14] = #200000 1'b1;
	signal_in[14] = #100000 1'b0;
	signal_in[14] = #100000 1'b1;
	signal_in[14] = #300000 1'b0;
	signal_in[14] = #100000 1'b1;
	signal_in[14] = #100000 1'b0;
	signal_in[14] = #300000 1'b1;
	signal_in[14] = #400000 1'b0;
end 
// signal_in[ 13 ]
initial
begin
	signal_in[13] = 1'b1;
	signal_in[13] = #300000 1'b0;
	signal_in[13] = #100000 1'b1;
	signal_in[13] = #100000 1'b0;
	signal_in[13] = #100000 1'b1;
	signal_in[13] = #100000 1'b0;
	signal_in[13] = #200000 1'b1;
	signal_in[13] = #300000 1'b0;
	signal_in[13] = #300000 1'b1;
	signal_in[13] = #100000 1'b0;
	signal_in[13] = #100000 1'b1;
	signal_in[13] = #300000 1'b0;
	signal_in[13] = #100000 1'b1;
	signal_in[13] = #400000 1'b0;
	signal_in[13] = #100000 1'b1;
	signal_in[13] = #100000 1'b0;
	signal_in[13] = #300000 1'b1;
	signal_in[13] = #100000 1'b0;
	signal_in[13] = #300000 1'b1;
	signal_in[13] = #100000 1'b0;
	signal_in[13] = #300000 1'b1;
	signal_in[13] = #100000 1'b0;
end 
// signal_in[ 12 ]
initial
begin
	signal_in[12] = 1'b1;
	signal_in[12] = #300000 1'b0;
	signal_in[12] = #200000 1'b1;
	signal_in[12] = #100000 1'b0;
	signal_in[12] = #200000 1'b1;
	signal_in[12] = #500000 1'b0;
	signal_in[12] = #500000 1'b1;
	signal_in[12] = #100000 1'b0;
	signal_in[12] = #100000 1'b1;
	signal_in[12] = #300000 1'b0;
	signal_in[12] = #400000 1'b1;
	signal_in[12] = #300000 1'b0;
	signal_in[12] = #100000 1'b1;
	signal_in[12] = #100000 1'b0;
	signal_in[12] = #600000 1'b1;
	signal_in[12] = #100000 1'b0;
end 
// signal_in[ 11 ]
initial
begin
	signal_in[11] = 1'b0;
	signal_in[11] = #400000 1'b1;
	signal_in[11] = #200000 1'b0;
	signal_in[11] = #100000 1'b1;
	signal_in[11] = #300000 1'b0;
	signal_in[11] = #200000 1'b1;
	signal_in[11] = #100000 1'b0;
	signal_in[11] = #300000 1'b1;
	signal_in[11] = #100000 1'b0;
	signal_in[11] = #200000 1'b1;
	signal_in[11] = #100000 1'b0;
	signal_in[11] = #100000 1'b1;
	signal_in[11] = #100000 1'b0;
	signal_in[11] = #100000 1'b1;
	signal_in[11] = #100000 1'b0;
	signal_in[11] = #100000 1'b1;
	signal_in[11] = #100000 1'b0;
	signal_in[11] = #100000 1'b1;
	signal_in[11] = #400000 1'b0;
	signal_in[11] = #500000 1'b1;
	signal_in[11] = #100000 1'b0;
	signal_in[11] = #100000 1'b1;
end 
// signal_in[ 10 ]
initial
begin
	signal_in[10] = 1'b1;
	signal_in[10] = #300000 1'b0;
	signal_in[10] = #100000 1'b1;
	signal_in[10] = #600000 1'b0;
	signal_in[10] = #500000 1'b1;
	signal_in[10] = #100000 1'b0;
	signal_in[10] = #100000 1'b1;
	signal_in[10] = #200000 1'b0;
	signal_in[10] = #100000 1'b1;
	signal_in[10] = #600000 1'b0;
	signal_in[10] = #100000 1'b1;
	signal_in[10] = #100000 1'b0;
	signal_in[10] = #500000 1'b1;
	signal_in[10] = #200000 1'b0;
	signal_in[10] = #200000 1'b1;
	signal_in[10] = #100000 1'b0;
	signal_in[10] = #100000 1'b1;
end 
// signal_in[ 9 ]
initial
begin
	signal_in[9] = 1'b1;
	signal_in[9] = #200000 1'b0;
	signal_in[9] = #100000 1'b1;
	signal_in[9] = #100000 1'b0;
	signal_in[9] = #300000 1'b1;
	signal_in[9] = #200000 1'b0;
	signal_in[9] = #100000 1'b1;
	signal_in[9] = #500000 1'b0;
	signal_in[9] = #100000 1'b1;
	signal_in[9] = #100000 1'b0;
	signal_in[9] = #400000 1'b1;
	signal_in[9] = #200000 1'b0;
	signal_in[9] = #100000 1'b1;
	signal_in[9] = #100000 1'b0;
	signal_in[9] = #100000 1'b1;
	signal_in[9] = #100000 1'b0;
	signal_in[9] = #700000 1'b1;
	signal_in[9] = #100000 1'b0;
	signal_in[9] = #100000 1'b1;
	signal_in[9] = #100000 1'b0;
	signal_in[9] = #100000 1'b1;
end 
// signal_in[ 8 ]
initial
begin
	signal_in[8] = 1'b1;
	signal_in[8] = #200000 1'b0;
	signal_in[8] = #100000 1'b1;
	signal_in[8] = #100000 1'b0;
	signal_in[8] = #100000 1'b1;
	signal_in[8] = #200000 1'b0;
	signal_in[8] = #100000 1'b1;
	signal_in[8] = #200000 1'b0;
	signal_in[8] = #100000 1'b1;
	signal_in[8] = #100000 1'b0;
	signal_in[8] = #200000 1'b1;
	signal_in[8] = #200000 1'b0;
	signal_in[8] = #600000 1'b1;
	signal_in[8] = #200000 1'b0;
	signal_in[8] = #100000 1'b1;
	signal_in[8] = #300000 1'b0;
	signal_in[8] = #100000 1'b1;
	signal_in[8] = #100000 1'b0;
	signal_in[8] = #300000 1'b1;
	signal_in[8] = #200000 1'b0;
	signal_in[8] = #100000 1'b1;
	signal_in[8] = #100000 1'b0;
	signal_in[8] = #100000 1'b1;
end 
// signal_in[ 7 ]
initial
begin
	signal_in[7] = 1'b1;
	signal_in[7] = #100000 1'b0;
	signal_in[7] = #200000 1'b1;
	signal_in[7] = #100000 1'b0;
	signal_in[7] = #700000 1'b1;
	signal_in[7] = #100000 1'b0;
	signal_in[7] = #100000 1'b1;
	signal_in[7] = #200000 1'b0;
	signal_in[7] = #100000 1'b1;
	signal_in[7] = #100000 1'b0;
	signal_in[7] = #100000 1'b1;
	signal_in[7] = #300000 1'b0;
	signal_in[7] = #300000 1'b1;
	signal_in[7] = #100000 1'b0;
	signal_in[7] = #100000 1'b1;
	signal_in[7] = #100000 1'b0;
	signal_in[7] = #100000 1'b1;
	signal_in[7] = #400000 1'b0;
	signal_in[7] = #100000 1'b1;
	signal_in[7] = #100000 1'b0;
	signal_in[7] = #300000 1'b1;
	signal_in[7] = #100000 1'b0;
end 
// signal_in[ 6 ]
initial
begin
	signal_in[6] = 1'b0;
	signal_in[6] = #100000 1'b1;
	signal_in[6] = #100000 1'b0;
	signal_in[6] = #200000 1'b1;
	signal_in[6] = #100000 1'b0;
	signal_in[6] = #200000 1'b1;
	signal_in[6] = #100000 1'b0;
	signal_in[6] = #100000 1'b1;
	signal_in[6] = #200000 1'b0;
	signal_in[6] = #900000 1'b1;
	signal_in[6] = #100000 1'b0;
	signal_in[6] = #100000 1'b1;
	signal_in[6] = #400000 1'b0;
	signal_in[6] = #200000 1'b1;
	signal_in[6] = #100000 1'b0;
	signal_in[6] = #200000 1'b1;
	signal_in[6] = #100000 1'b0;
	signal_in[6] = #100000 1'b1;
	signal_in[6] = #100000 1'b0;
	signal_in[6] = #100000 1'b1;
end 
// signal_in[ 5 ]
initial
begin
	signal_in[5] = 1'b1;
	signal_in[5] = #100000 1'b0;
	signal_in[5] = #400000 1'b1;
	signal_in[5] = #100000 1'b0;
	signal_in[5] = #400000 1'b1;
	signal_in[5] = #100000 1'b0;
	signal_in[5] = #300000 1'b1;
	signal_in[5] = #300000 1'b0;
	signal_in[5] = #400000 1'b1;
	signal_in[5] = #100000 1'b0;
	signal_in[5] = #100000 1'b1;
	signal_in[5] = #200000 1'b0;
	signal_in[5] = #300000 1'b1;
	signal_in[5] = #200000 1'b0;
	signal_in[5] = #200000 1'b1;
	signal_in[5] = #100000 1'b0;
	signal_in[5] = #300000 1'b1;
	signal_in[5] = #300000 1'b0;
end 
// signal_in[ 4 ]
initial
begin
	signal_in[4] = 1'b0;
	signal_in[4] = #300000 1'b1;
	signal_in[4] = #100000 1'b0;
	signal_in[4] = #300000 1'b1;
	signal_in[4] = #300000 1'b0;
	signal_in[4] = #200000 1'b1;
	signal_in[4] = #300000 1'b0;
	signal_in[4] = #100000 1'b1;
	signal_in[4] = #200000 1'b0;
	signal_in[4] = #300000 1'b1;
	signal_in[4] = #100000 1'b0;
	signal_in[4] = #100000 1'b1;
	signal_in[4] = #100000 1'b0;
	signal_in[4] = #100000 1'b1;
	signal_in[4] = #100000 1'b0;
	signal_in[4] = #500000 1'b1;
	signal_in[4] = #200000 1'b0;
	signal_in[4] = #100000 1'b1;
	signal_in[4] = #200000 1'b0;
end 
// signal_in[ 3 ]
initial
begin
	signal_in[3] = 1'b1;
	signal_in[3] = #200000 1'b0;
	signal_in[3] = #300000 1'b1;
	signal_in[3] = #500000 1'b0;
	signal_in[3] = #100000 1'b1;
	signal_in[3] = #200000 1'b0;
	signal_in[3] = #100000 1'b1;
	signal_in[3] = #100000 1'b0;
	signal_in[3] = #400000 1'b1;
	signal_in[3] = #100000 1'b0;
	signal_in[3] = #100000 1'b1;
	signal_in[3] = #300000 1'b0;
	signal_in[3] = #400000 1'b1;
	signal_in[3] = #300000 1'b0;
	signal_in[3] = #200000 1'b1;
	signal_in[3] = #300000 1'b0;
	signal_in[3] = #200000 1'b1;
end 
// signal_in[ 2 ]
initial
begin
	signal_in[2] = 1'b1;
	signal_in[2] = #200000 1'b0;
	signal_in[2] = #100000 1'b1;
	signal_in[2] = #200000 1'b0;
	signal_in[2] = #200000 1'b1;
	signal_in[2] = #100000 1'b0;
	signal_in[2] = #200000 1'b1;
	signal_in[2] = #200000 1'b0;
	signal_in[2] = #100000 1'b1;
	signal_in[2] = #200000 1'b0;
	signal_in[2] = #100000 1'b1;
	signal_in[2] = #400000 1'b0;
	signal_in[2] = #200000 1'b1;
	signal_in[2] = #100000 1'b0;
	signal_in[2] = #200000 1'b1;
	signal_in[2] = #200000 1'b0;
	signal_in[2] = #100000 1'b1;
	signal_in[2] = #100000 1'b0;
	signal_in[2] = #100000 1'b1;
	signal_in[2] = #100000 1'b0;
	signal_in[2] = #200000 1'b1;
	signal_in[2] = #100000 1'b0;
	signal_in[2] = #100000 1'b1;
	signal_in[2] = #100000 1'b0;
	signal_in[2] = #100000 1'b1;
end 
// signal_in[ 1 ]
initial
begin
	signal_in[1] = 1'b1;
	signal_in[1] = #300000 1'b0;
	signal_in[1] = #100000 1'b1;
	signal_in[1] = #200000 1'b0;
	signal_in[1] = #100000 1'b1;
	signal_in[1] = #300000 1'b0;
	signal_in[1] = #300000 1'b1;
	signal_in[1] = #100000 1'b0;
	signal_in[1] = #200000 1'b1;
	signal_in[1] = #200000 1'b0;
	signal_in[1] = #300000 1'b1;
	signal_in[1] = #200000 1'b0;
	signal_in[1] = #100000 1'b1;
	signal_in[1] = #100000 1'b0;
	signal_in[1] = #200000 1'b1;
	signal_in[1] = #300000 1'b0;
	signal_in[1] = #200000 1'b1;
	signal_in[1] = #100000 1'b0;
	signal_in[1] = #200000 1'b1;
	signal_in[1] = #300000 1'b0;
	signal_in[1] = #100000 1'b1;
end 
// signal_in[ 0 ]
initial
begin
	signal_in[0] = 1'b0;
	signal_in[0] = #100000 1'b1;
	signal_in[0] = #100000 1'b0;
	signal_in[0] = #100000 1'b1;
	signal_in[0] = #100000 1'b0;
	signal_in[0] = #500000 1'b1;
	signal_in[0] = #100000 1'b0;
	signal_in[0] = #300000 1'b1;
	signal_in[0] = #500000 1'b0;
	signal_in[0] = #500000 1'b1;
	signal_in[0] = #100000 1'b0;
	signal_in[0] = #400000 1'b1;
	signal_in[0] = #300000 1'b0;
	signal_in[0] = #100000 1'b1;
	signal_in[0] = #100000 1'b0;
	signal_in[0] = #100000 1'b1;
	signal_in[0] = #300000 1'b0;
	signal_in[0] = #100000 1'b1;
end 
endmodule

