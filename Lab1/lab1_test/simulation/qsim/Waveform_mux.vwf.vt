// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/23/2019 22:29:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg D1;
reg D2;
reg D3;
reg D4;
reg [1:0] sel;
// wires                                               
wire Q;

// assign statements (if any)                          
mux i1 (
// port map - connection between master ports and signals/registers   
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.Q(Q),
	.sel(sel)
);
initial 
begin 
#200000 $finish;
end 

// D1
always
begin
	D1 = 1'b0;
	D1 = #5000 1'b1;
	#5000;
end 

// D2
always
begin
	D2 = 1'b0;
	D2 = #10000 1'b1;
	#10000;
end 

// D3
always
begin
	D3 = 1'b0;
	D3 = #20000 1'b1;
	#20000;
end 

// D4
initial
begin
	repeat(2)
	begin
		D4 = 1'b0;
		D4 = #40000 1'b1;
		# 40000;
	end
	D4 = 1'b0;
end 
// sel[ 1 ]
always
begin
	sel[1] = 1'b0;
	sel[1] = #50000 1'b1;
	#50000;
end 
// sel[ 0 ]
always
begin
	sel[0] = 1'b0;
	sel[0] = #100000 1'b1;
	#100000;
end 
endmodule

